// <auto-generated />
using System;
using Flora.Services.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Flora.Services.Migrations
{
    [DbContext(typeof(FLoraDbContext))]
    [Migration("20250821123358_update")]
    partial class update
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Flora.Services.Database.BlogComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BlogPostId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BlogPostId");

                    b.HasIndex("UserId");

                    b.ToTable("BlogComments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorName = "",
                            BlogPostId = 1,
                            Content = "These spring arrangements are gorgeous! I especially love the tulip and daffodil combination.",
                            CreatedAt = new DateTime(2025, 3, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            AuthorName = "",
                            BlogPostId = 2,
                            Content = "Thanks for the houseplant tips! I've been struggling with my fiddle leaf fig and this was really helpful.",
                            CreatedAt = new DateTime(2025, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            AuthorName = "",
                            BlogPostId = 3,
                            Content = "I used your advice for my wedding last month and my bouquet was perfect! Thank you!",
                            CreatedAt = new DateTime(2025, 5, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            AuthorName = "",
                            BlogPostId = 4,
                            Content = "Great article! I'll be sharing these summer flower tips with our customers.",
                            CreatedAt = new DateTime(2025, 6, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 2
                        },
                        new
                        {
                            Id = 5,
                            AuthorName = "",
                            BlogPostId = 5,
                            Content = "I never knew roses had such complex meanings. This will help me choose better gifts!",
                            CreatedAt = new DateTime(2025, 7, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 2
                        });
                });

            modelBuilder.Entity("Flora.Services.Database.BlogImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BlogPostId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BlogPostId");

                    b.ToTable("BlogImages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BlogPostId = 1,
                            Url = "https://florablobstorage.blob.core.windows.net/profile-images/pinklillies.jpg"
                        },
                        new
                        {
                            Id = 2,
                            BlogPostId = 2,
                            Url = "https://florablobstorage.blob.core.windows.net/profile-images/palm.png"
                        },
                        new
                        {
                            Id = 3,
                            BlogPostId = 3,
                            Url = "https://florablobstorage.blob.core.windows.net/profile-images/weeding5.jpg"
                        },
                        new
                        {
                            Id = 4,
                            BlogPostId = 4,
                            Url = "https://florablobstorage.blob.core.windows.net/profile-images/bluetulips.jpg"
                        },
                        new
                        {
                            Id = 5,
                            BlogPostId = 5,
                            Url = "https://florablobstorage.blob.core.windows.net/profile-images/pinklillies.jpg"
                        });
                });

            modelBuilder.Entity("Flora.Services.Database.BlogPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BlogPosts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Spring is the perfect time to bring fresh flowers into your home. Here are ten beautiful arrangements that celebrate the season's blooms...",
                            CreatedAt = new DateTime(2025, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "10 Beautiful Spring Flower Arrangements"
                        },
                        new
                        {
                            Id = 2,
                            Content = "Houseplants add life and beauty to any space, but they require proper care. Learn essential tips for watering, sunlight, and seasonal maintenance...",
                            CreatedAt = new DateTime(2025, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "How to Care for Your Houseplants"
                        },
                        new
                        {
                            Id = 3,
                            Content = "Your wedding bouquet is a crucial part of your special day. Explore different styles, seasonal options, and how to match your bouquet to your wedding theme...",
                            CreatedAt = new DateTime(2025, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Creating the Perfect Wedding Bouquet"
                        },
                        new
                        {
                            Id = 4,
                            Content = "When temperatures rise, you need blooms that can withstand the heat. Discover gorgeous flowers that will keep your garden vibrant all summer long...",
                            CreatedAt = new DateTime(2025, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Flowers That Thrive in Summer Heat"
                        },
                        new
                        {
                            Id = 5,
                            Content = "For centuries, flowers have carried special meanings. Learn the hidden symbolism behind popular blooms to make your next gift more meaningful...",
                            CreatedAt = new DateTime(2025, 7, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Language of Flowers: What Each Bloom Symbolizes"
                        });
                });

            modelBuilder.Entity("Flora.Services.Database.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Carts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 7, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 7, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 3
                        });
                });

            modelBuilder.Entity("Flora.Services.Database.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CardMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomBouquetId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SpecialInstructions")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("CustomBouquetId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CardMessage = "Happy Birthday!",
                            CartId = 1,
                            ImageUrl = "https://florablobstorage.blob.core.windows.net/profile-images/box3.jpg",
                            Price = 180.00m,
                            ProductId = 5,
                            ProductName = "Eternal Blossom Box",
                            Quantity = 1
                        },
                        new
                        {
                            Id = 2,
                            CardMessage = "Get well soon!",
                            CartId = 2,
                            ImageUrl = "https://florablobstorage.blob.core.windows.net/profile-images/box3.jpg",
                            Price = 50.00m,
                            ProductId = 21,
                            ProductName = "Pink Bloosom Bouquet",
                            Quantity = 1
                        },
                        new
                        {
                            Id = 3,
                            CartId = 2,
                            ImageUrl = "https://florablobstorage.blob.core.windows.net/profile-images/box3.jpg",
                            Price = 20.00m,
                            ProductId = 29,
                            ProductName = "Peace Lilly",
                            Quantity = 2
                        });
                });

            modelBuilder.Entity("Flora.Services.Database.Categories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryImageUrl = "https://florablobstorage.blob.core.windows.net/profile-images/pinklillies.jpg",
                            Description = "Beautifully arranged mixed flowers for all occasions.",
                            Name = "Bouquets"
                        },
                        new
                        {
                            Id = 2,
                            CategoryImageUrl = "https://florablobstorage.blob.core.windows.net/profile-images/homeplants.png",
                            Description = "Green gifts that grow with love.",
                            Name = "Plants"
                        },
                        new
                        {
                            Id = 3,
                            CategoryImageUrl = "https://florablobstorage.blob.core.windows.net/profile-images/domesss.png",
                            Description = "Flowers combined with chocolates, perfumes and more.",
                            Name = "Domes"
                        },
                        new
                        {
                            Id = 4,
                            CategoryImageUrl = "https://florablobstorage.blob.core.windows.net/profile-images/flowes.png",
                            Description = "For custom bouquets",
                            Name = "Flower"
                        },
                        new
                        {
                            Id = 5,
                            CategoryImageUrl = "https://florablobstorage.blob.core.windows.net/profile-images/box1.jpg",
                            Description = "Flower arrangements in beautiful boxes",
                            Name = "Box"
                        },
                        new
                        {
                            Id = 6,
                            CategoryImageUrl = "https://florablobstorage.blob.core.windows.net/profile-images/giftset.png",
                            Description = "Flowers combined with chocolates, perfumes and more.",
                            Name = "Gift Sets"
                        },
                        new
                        {
                            Id = 7,
                            CategoryImageUrl = "https://florablobstorage.blob.core.windows.net/profile-images/weeding.jpg",
                            Description = "Elegant wedding bouquets for brides",
                            Name = "Bridal Bouquets"
                        });
                });

            modelBuilder.Entity("Flora.Services.Database.CustomBouquet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CardMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecialInstructions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CustomBouquets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CardMessage = "Happy Valentine's Day!",
                            Color = "Red",
                            SpecialInstructions = "Arrange in heart shape if possible",
                            TotalPrice = 65.00m,
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            CardMessage = "Happy Mother's Day!",
                            Color = "Pink",
                            TotalPrice = 55.00m,
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            CardMessage = "Congratulations on your baby boy!",
                            Color = "Blue",
                            SpecialInstructions = "Include a small teddy bear if available",
                            TotalPrice = 80.00m,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("Flora.Services.Database.CustomBouquetItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomBouquetId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomBouquetId");

                    b.HasIndex("ProductId");

                    b.ToTable("CustomBouquetItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomBouquetId = 1,
                            ProductId = 53,
                            Quantity = 7
                        },
                        new
                        {
                            Id = 2,
                            CustomBouquetId = 1,
                            ProductId = 49,
                            Quantity = 3
                        },
                        new
                        {
                            Id = 3,
                            CustomBouquetId = 2,
                            ProductId = 48,
                            Quantity = 5
                        },
                        new
                        {
                            Id = 4,
                            CustomBouquetId = 2,
                            ProductId = 50,
                            Quantity = 3
                        },
                        new
                        {
                            Id = 5,
                            CustomBouquetId = 2,
                            ProductId = 49,
                            Quantity = 2
                        },
                        new
                        {
                            Id = 6,
                            CustomBouquetId = 3,
                            ProductId = 55,
                            Quantity = 2
                        },
                        new
                        {
                            Id = 7,
                            CustomBouquetId = 3,
                            ProductId = 54,
                            Quantity = 6
                        },
                        new
                        {
                            Id = 8,
                            CustomBouquetId = 3,
                            ProductId = 49,
                            Quantity = 4
                        });
                });

            modelBuilder.Entity("Flora.Services.Database.DecorationRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Budget")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfGuests")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfTables")
                        .HasColumnType("int");

                    b.Property<string>("SpecialRequests")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThemeOrColors")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("VenueType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("DecorationRequests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Budget = 2000.00m,
                            EventDate = new DateTime(2025, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventType = "Wedding",
                            Location = "Sarajevo",
                            NumberOfGuests = 150,
                            NumberOfTables = 20,
                            SpecialRequests = "Bride is allergic to lilies, please avoid using them",
                            ThemeOrColors = "White and Gold",
                            UserId = 2,
                            VenueType = "Hotel Ballroom"
                        },
                        new
                        {
                            Id = 2,
                            Budget = 500.00m,
                            EventDate = new DateTime(2025, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventType = "Birthday Party",
                            Location = "Mostar",
                            NumberOfGuests = 50,
                            NumberOfTables = 8,
                            SpecialRequests = "Need table centerpieces and entrance decoration",
                            ThemeOrColors = "Blue and Silver",
                            UserId = 3,
                            VenueType = "Restaurant"
                        },
                        new
                        {
                            Id = 3,
                            Budget = 1500.00m,
                            EventDate = new DateTime(2025, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventType = "Corporate Event",
                            Location = "Tuzla",
                            NumberOfGuests = 200,
                            NumberOfTables = 25,
                            SpecialRequests = "Need stage decoration and branded floral arrangements",
                            ThemeOrColors = "Company colors: Red and Black",
                            UserId = 3,
                            VenueType = "Conference Hall"
                        });
                });

            modelBuilder.Entity("Flora.Services.Database.DecorationSelection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DecorationRequestId")
                        .HasColumnType("int");

                    b.Property<int>("DecorationSuggestionId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DecorationRequestId");

                    b.HasIndex("DecorationSuggestionId");

                    b.HasIndex("UserId");

                    b.ToTable("DecorationSelections");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comments = "I love this design! Can we add a few more roses to each centerpiece?",
                            CreatedAt = new DateTime(2025, 7, 20, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            DecorationRequestId = 1,
                            DecorationSuggestionId = 1,
                            Status = "Selected",
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            Comments = "Perfect! Please make sure the blue matches the invitations I sent.",
                            CreatedAt = new DateTime(2025, 7, 25, 10, 15, 0, 0, DateTimeKind.Unspecified),
                            DecorationRequestId = 2,
                            DecorationSuggestionId = 3,
                            Status = "Selected",
                            UserId = 3
                        });
                });

            modelBuilder.Entity("Flora.Services.Database.DecorationSuggestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DecorationRequestId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DecorationRequestId");

                    b.ToTable("DecorationSuggestions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DecorationRequestId = 1,
                            Description = "Elegant table centerpieces with white roses and gold accents",
                            ImageUrl = "https://florablobstorage.blob.core.windows.net/profile-images/bluetulips.jpg"
                        },
                        new
                        {
                            Id = 2,
                            DecorationRequestId = 1,
                            Description = "Entrance archway decorated with white orchids and gold drapery",
                            ImageUrl = "https://florablobstorage.blob.core.windows.net/profile-images/box1.jpg"
                        },
                        new
                        {
                            Id = 3,
                            DecorationRequestId = 2,
                            Description = "Blue hydrangea centerpieces with silver accents",
                            ImageUrl = "https://florablobstorage.blob.core.windows.net/profile-images/box2.jpg"
                        },
                        new
                        {
                            Id = 4,
                            DecorationRequestId = 3,
                            Description = "Modern arrangements with red roses and black accents, incorporating company logo",
                            ImageUrl = "https://florablobstorage.blob.core.windows.net/profile-images/box3.jpg"
                        });
                });

            modelBuilder.Entity("Flora.Services.Database.Donation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("CampaignId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("DonorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("UserId");

                    b.ToTable("Donations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 50.0,
                            CampaignId = 1,
                            Date = new DateTime(2025, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DonorName = "Maja",
                            Email = "maja@example.com",
                            Purpose = "Community Garden Project",
                            Status = "Completed",
                            TransactionId = "PAY-1DX87612GH298734K",
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            Amount = 25.0,
                            CampaignId = 2,
                            Date = new DateTime(2025, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DonorName = "Amina",
                            Email = "amina@example.com",
                            Purpose = "Flowers for Hospitals",
                            Status = "Completed",
                            TransactionId = "PAY-9HG76354KJ298345L",
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            Amount = 100.0,
                            CampaignId = 3,
                            Date = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DonorName = "Emina",
                            Email = "emina@example.com",
                            Purpose = "School Gardening Education",
                            Status = "Completed",
                            TransactionId = "PAY-7JH98345KL456789M",
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            Amount = 75.0,
                            CampaignId = 1,
                            Date = new DateTime(2025, 7, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DonorName = "Medin",
                            Email = "medin@example.com",
                            Purpose = "Community Garden Project",
                            Status = "Completed",
                            TransactionId = "PAY-2KL87345JH765432N",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("Flora.Services.Database.DonationCampaign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("DonationCampaigns");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Help us build a community garden in downtown Sarajevo where children can learn about plants and sustainable gardening.",
                            EndDate = new DateTime(2025, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://florablobstorage.blob.core.windows.net/profile-images/pinktulips.jpg",
                            Title = "Community Garden Project",
                            TotalAmount = 0m
                        },
                        new
                        {
                            Id = 2,
                            Description = "Donate to help us deliver fresh flowers to patients in local hospitals, bringing joy and color to those who need it most.",
                            EndDate = new DateTime(2025, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://florablobstorage.blob.core.windows.net/profile-images/pinktulips.jpg",
                            Title = "Flowers for Hospitals",
                            TotalAmount = 0m
                        },
                        new
                        {
                            Id = 3,
                            Description = "Support our initiative to teach gardening in schools, providing students with hands-on experience growing plants and flowers.",
                            EndDate = new DateTime(2026, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://florablobstorage.blob.core.windows.net/profile-images/pinktulips.jpg",
                            Title = "School Gardening Education",
                            TotalAmount = 0m
                        });
                });

            modelBuilder.Entity("Flora.Services.Database.Favorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Favorites");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 3,
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 6, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 10,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 21,
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 5,
                            UserId = 3
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 7, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 14,
                            UserId = 3
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 7, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 38,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("Flora.Services.Database.Occasion", b =>
                {
                    b.Property<int>("OccasionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OccasionId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OccasionId");

                    b.ToTable("Occasions");

                    b.HasData(
                        new
                        {
                            OccasionId = 1,
                            Name = "Birthday"
                        },
                        new
                        {
                            OccasionId = 2,
                            Name = "Newborns"
                        },
                        new
                        {
                            OccasionId = 3,
                            Name = "Graduation"
                        });
                });

            modelBuilder.Entity("Flora.Services.Database.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ShippingAddressId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ShippingAddressId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OrderDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ShippingAddressId = 1,
                            Status = "Completed",
                            TotalAmount = 135.00m,
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            OrderDate = new DateTime(2025, 7, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ShippingAddressId = 2,
                            Status = "Delivered",
                            TotalAmount = 80.00m,
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            OrderDate = new DateTime(2025, 7, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ShippingAddressId = 3,
                            Status = "Processed",
                            TotalAmount = 50.00m,
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            OrderDate = new DateTime(2025, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ShippingAddressId = 4,
                            Status = "PaymentInitiated",
                            TotalAmount = 100.00m,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("Flora.Services.Database.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CardMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CustomBouquetId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("PriceAtPurchase")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SpecialInstructions")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomBouquetId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CardMessage = "Happy Birthday Mom! Love, Maja",
                            OrderId = 1,
                            PriceAtPurchase = 150.00m,
                            ProductId = 3,
                            Quantity = 1,
                            SpecialInstructions = "Please deliver before noon"
                        },
                        new
                        {
                            Id = 2,
                            CardMessage = "Congratulations on your new home!",
                            OrderId = 2,
                            PriceAtPurchase = 80.00m,
                            ProductId = 4,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 3,
                            CardMessage = "Get well soon!",
                            OrderId = 3,
                            PriceAtPurchase = 35.00m,
                            ProductId = 22,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 4,
                            OrderId = 3,
                            PriceAtPurchase = 18.00m,
                            ProductId = 11,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 5,
                            CardMessage = "Happy Anniversary!",
                            OrderId = 4,
                            PriceAtPurchase = 100.00m,
                            ProductId = 14,
                            Quantity = 1,
                            SpecialInstructions = "Include a ribbon"
                        });
                });

            modelBuilder.Entity("Flora.Services.Database.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNew")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("OccasionId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("OccasionId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            CategoryId = 5,
                            Description = "Flowers beautifully arranged in a box for newborn baby",
                            IsAvailable = true,
                            IsFeatured = false,
                            IsNew = false,
                            Name = "Welcome Baby Girl",
                            OccasionId = 2,
                            Price = 60.00m
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            CategoryId = 5,
                            Description = "Flowers beautifully arranged in a box for newborn baby",
                            IsAvailable = true,
                            IsFeatured = false,
                            IsNew = false,
                            Name = "Welcome Baby Boy",
                            OccasionId = 2,
                            Price = 60.00m
                        },
                        new
                        {
                            Id = 3,
                            Active = true,
                            CategoryId = 1,
                            Description = "Luxury rosegold bouquet with 101 rose in mixed colors for our birthday queens",
                            IsAvailable = true,
                            IsFeatured = true,
                            IsNew = true,
                            Name = "Happy Birthday Queen",
                            OccasionId = 1,
                            Price = 150.00m
                        },
                        new
                        {
                            Id = 4,
                            Active = true,
                            CategoryId = 1,
                            Description = "A stunning bouquet of 20 exquisite blue tulips, hand-picked at peak bloom for their rich sapphire hue. Accented with delicate white waxflowers and soft silver eucalyptus leaves, this arrangement brings a cool, serene elegance to any space, perfect for those who appreciate rare beauty and timeless style.",
                            IsAvailable = true,
                            IsFeatured = false,
                            IsNew = false,
                            Name = "Blue Tulip Elegance",
                            OccasionId = 2,
                            Price = 80.00m
                        },
                        new
                        {
                            Id = 5,
                            Active = true,
                            CategoryId = 5,
                            Description = "An opulent arrangement featuring over 50 hand-selected blooms, including velvety red roses, fragrant gardenias, delicate lilies, and soft spray carnations.",
                            IsAvailable = true,
                            IsFeatured = true,
                            IsNew = true,
                            Name = "Eternal Blossom Box",
                            OccasionId = 1,
                            Price = 180.00m
                        },
                        new
                        {
                            Id = 6,
                            Active = true,
                            CategoryId = 5,
                            Description = "A luxurious gift box featuring a lush blue hydrangea centerpiece surrounded by delicate white baby's breath and sprigs of fresh greenery.",
                            IsAvailable = true,
                            IsFeatured = false,
                            IsNew = true,
                            Name = "Serenity Blue Box",
                            OccasionId = 2,
                            Price = 100.00m
                        },
                        new
                        {
                            Id = 7,
                            Active = true,
                            CategoryId = 5,
                            Description = "A charming gift box filled with a stunning mix of soft pink roses, delicate peonies, and lush ranunculus blooms.",
                            IsAvailable = true,
                            IsFeatured = false,
                            IsNew = true,
                            Name = "Blush Elegance Box",
                            OccasionId = 1,
                            Price = 90.00m
                        },
                        new
                        {
                            Id = 8,
                            Active = true,
                            CategoryId = 5,
                            Description = "Elegant box filled with pristine white roses symbolizing purity and grace, complemented by delicate white lilies and soft greenery",
                            IsAvailable = true,
                            IsFeatured = false,
                            IsNew = false,
                            Name = "Pure Serenity Box",
                            Price = 80.00m
                        },
                        new
                        {
                            Id = 9,
                            Active = true,
                            CategoryId = 5,
                            Description = "Elegant box with 20 red roses",
                            IsAvailable = true,
                            IsFeatured = false,
                            IsNew = true,
                            Name = "Flower Box Deluxe",
                            Price = 70.00m
                        },
                        new
                        {
                            Id = 10,
                            Active = true,
                            CategoryId = 5,
                            Description = "A romantic heart-shaped box overflowing with lush, velvety pink roses, symbolizing love and admiration.",
                            IsAvailable = true,
                            IsFeatured = true,
                            IsNew = true,
                            Name = "Blush Heart Box",
                            OccasionId = 1,
                            Price = 120.00m
                        },
                        new
                        {
                            Id = 11,
                            Active = true,
                            CategoryId = 2,
                            Description = "A resilient beauty with minimal care needs, this spiky companion adds a touch of desert magic and modern style to any space.",
                            IsAvailable = true,
                            IsFeatured = false,
                            IsNew = false,
                            Name = "Cactus",
                            Price = 18.00m
                        },
                        new
                        {
                            Id = 12,
                            Active = true,
                            CategoryId = 2,
                            Description = "With its tall, graceful stalks and lush, arching green leaves, the Corn Plant brings a tropical vibe and elegant greenery to any interior. ",
                            IsAvailable = true,
                            IsFeatured = false,
                            IsNew = false,
                            Name = "Cornplant",
                            Price = 25.00m
                        },
                        new
                        {
                            Id = 13,
                            Active = true,
                            CategoryId = 1,
                            Description = "Gracefully arranged white dahlias nestled in a serene blue bouquet, creating a perfect harmony of purity and calm. ",
                            IsAvailable = true,
                            IsFeatured = false,
                            IsNew = true,
                            Name = "Elegant White Dahlias Bouquet",
                            OccasionId = 2,
                            Price = 60.00m
                        },
                        new
                        {
                            Id = 14,
                            Active = true,
                            CategoryId = 3,
                            Description = "A warm mix of golden roses and amber-colored wildflowers under a glass dome",
                            IsAvailable = true,
                            IsFeatured = true,
                            IsNew = false,
                            Name = "Golden Hour Dome",
                            Price = 100.00m
                        },
                        new
                        {
                            Id = 15,
                            Active = true,
                            CategoryId = 3,
                            Description = "A magical blend of fresh roses, lavender sprigs, and eucalyptus leaves artfully enclosed in a crystal-clear glass dome.",
                            IsAvailable = true,
                            IsFeatured = false,
                            IsNew = false,
                            Name = "The Enchanted Garden Dome",
                            Price = 70.00m
                        },
                        new
                        {
                            Id = 16,
                            Active = true,
                            CategoryId = 3,
                            Description = "A single, stunning blue rose preserved under a crystal-clear glass dome. Symbolizing mystery and rarity.",
                            IsAvailable = true,
                            IsFeatured = false,
                            IsNew = true,
                            Name = "Midnight Bloom Dome",
                            Price = 40.00m
                        },
                        new
                        {
                            Id = 17,
                            Active = true,
                            CategoryId = 3,
                            Description = "Elegant dome perfect for the holiday season.",
                            IsAvailable = true,
                            IsFeatured = false,
                            IsNew = true,
                            Name = "Winter Wonderland Dome",
                            Price = 70.00m
                        },
                        new
                        {
                            Id = 18,
                            Active = true,
                            CategoryId = 3,
                            Description = "This dome bouquet brings joy and festive charm to any birthday celebration. Perfect as a memorable gift that lasts.",
                            IsAvailable = true,
                            IsFeatured = false,
                            IsNew = true,
                            Name = "Birthday Bliss Dome",
                            OccasionId = 1,
                            Price = 60.00m
                        },
                        new
                        {
                            Id = 19,
                            Active = true,
                            CategoryId = 1,
                            Description = "A stunning medley of roses, gerberas, and seasonal blooms, expertly arranged to create a harmonious explosion of color and fragrance.",
                            IsAvailable = true,
                            IsFeatured = false,
                            IsNew = false,
                            Name = "Garden Symphony Bouquet",
                            Price = 60.00m
                        },
                        new
                        {
                            Id = 20,
                            Active = true,
                            CategoryId = 1,
                            Description = "An exuberant gathering of seasonal blooms: daffodils, hyacinths, ranunculus, and freesias,",
                            IsAvailable = true,
                            IsFeatured = false,
                            IsNew = true,
                            Name = "Spring Awakening Mix",
                            Price = 40.00m
                        },
                        new
                        {
                            Id = 21,
                            Active = true,
                            CategoryId = 1,
                            Description = "A bouquet of fresh pink flowers.",
                            IsAvailable = true,
                            IsFeatured = true,
                            IsNew = true,
                            Name = "Pink Bloosom Bouquet",
                            OccasionId = 1,
                            Price = 50.00m
                        },
                        new
                        {
                            Id = 22,
                            Active = true,
                            CategoryId = 1,
                            Description = "A cheerful arrangement featuring soft pink gerberas and fresh white daisies",
                            IsAvailable = true,
                            IsFeatured = false,
                            IsNew = false,
                            Name = "Pink Delight Bouquet",
                            Price = 35.00m
                        },
                        new
                        {
                            Id = 23,
                            Active = true,
                            CategoryId = 1,
                            Description = " With 30 red roses, this bouquet captures the pride and happiness of a milestone reached.",
                            IsAvailable = true,
                            IsFeatured = false,
                            IsNew = false,
                            Name = "Achievement Celebration Bouquet",
                            OccasionId = 3,
                            Price = 135.00m
                        },
                        new
                        {
                            Id = 24,
                            Active = true,
                            CategoryId = 1,
                            Description = "A colorful medley of roses, tulips, and daisies in bold and bright hues, designed to inspire and celebrate this momentous occasion.",
                            IsAvailable = true,
                            IsFeatured = false,
                            IsNew = false,
                            Name = "Graduation Glory Mix",
                            OccasionId = 3,
                            Price = 75.00m
                        },
                        new
                        {
                            Id = 25,
                            Active = true,
                            CategoryId = 1,
                            Description = "A colorful medley of roses, tulips, and daisies in bold and bright hues, designed to inspire and celebrate this momentous occasion.",
                            IsAvailable = true,
                            IsFeatured = false,
                            IsNew = false,
                            Name = "Graduation Celebration Mix",
                            OccasionId = 3,
                            Price = 75.00m
                        },
                        new
                        {
                            Id = 26,
                            Active = true,
                            CategoryId = 5,
                            Description = "A cheerful arrangement featuring soft pink roses, designed to inspire and celebrate this moments.",
                            IsAvailable = true,
                            IsFeatured = false,
                            IsNew = false,
                            Name = "Bright Future Blossoms",
                            OccasionId = 3,
                            Price = 95.00m
                        },
                        new
                        {
                            Id = 27,
                            Active = true,
                            CategoryId = 1,
                            Description = "Delicate blue hydrangea blooms evoke the refreshing coolness of ocean waves.",
                            IsAvailable = true,
                            IsFeatured = false,
                            IsNew = false,
                            Name = "Ocean Breeze Hydrangea",
                            Price = 45.00m
                        },
                        new
                        {
                            Id = 28,
                            Active = true,
                            CategoryId = 2,
                            Description = "Bring a touch of the tropics into your home with this elegant palm.",
                            IsAvailable = true,
                            IsFeatured = false,
                            IsNew = false,
                            Name = "Palm",
                            Price = 25.00m
                        },
                        new
                        {
                            Id = 29,
                            Active = true,
                            CategoryId = 2,
                            Description = "Known for its glossy leaves and delicate white blooms, the Peace Lily purifies your air while adding a serene and peaceful vibe to your living space.",
                            IsAvailable = true,
                            IsFeatured = false,
                            IsNew = false,
                            Name = "Peace Lilly",
                            Price = 20.00m
                        },
                        new
                        {
                            Id = 30,
                            Active = true,
                            CategoryId = 2,
                            Description = "With lush, heart-shaped leaves, the Philodendron adds a vibrant splash of green and effortless style.",
                            IsAvailable = true,
                            IsFeatured = false,
                            IsNew = false,
                            Name = "Philodendron",
                            Price = 20.00m
                        },
                        new
                        {
                            Id = 31,
                            Active = true,
                            CategoryId = 1,
                            Description = "Bright and cheerful tulips bouquet",
                            IsAvailable = true,
                            IsFeatured = false,
                            IsNew = false,
                            Name = "Pink Lillies Bouquet",
                            Price = 40.00m
                        },
                        new
                        {
                            Id = 32,
                            Active = true,
                            CategoryId = 1,
                            Description = "Bright and cheerful tulips bouquet.",
                            IsAvailable = true,
                            IsFeatured = false,
                            IsNew = false,
                            Name = "Pink Tulips Bouquet",
                            Price = 35.00m
                        },
                        new
                        {
                            Id = 33,
                            Active = true,
                            CategoryId = 1,
                            Description = "Bright and cheerful tulips bouquet.",
                            IsAvailable = true,
                            IsFeatured = false,
                            IsNew = false,
                            Name = "Purple Tulips Bouquet",
                            Price = 35.00m
                        },
                        new
                        {
                            Id = 34,
                            Active = true,
                            CategoryId = 1,
                            Description = "Bright and cheerful red roses bouquet.",
                            IsAvailable = true,
                            IsFeatured = false,
                            IsNew = false,
                            Name = "Red Roses Bouquet",
                            Price = 5.00m
                        },
                        new
                        {
                            Id = 35,
                            Active = true,
                            CategoryId = 2,
                            Description = "A hardy and architectural beauty, the Snake Plant features tall, upright leaves with striking variegation.",
                            IsAvailable = true,
                            IsFeatured = false,
                            IsNew = false,
                            Name = "Snake Plant",
                            Price = 25.00m
                        },
                        new
                        {
                            Id = 36,
                            Active = true,
                            CategoryId = 2,
                            Description = "With its arching, striped leaves and cascading baby “spiders,” this lively plant brings dynamic energy and a fresh vibe to any room..",
                            IsAvailable = true,
                            IsFeatured = false,
                            IsNew = false,
                            Name = "Spider Plant",
                            Price = 35.00m
                        },
                        new
                        {
                            Id = 37,
                            Active = true,
                            CategoryId = 2,
                            Description = "Compact and resilient, this succulent boasts fleshy leaves in vibrant shades",
                            IsAvailable = true,
                            IsFeatured = false,
                            IsNew = false,
                            Name = "Suculents ",
                            Price = 35.00m
                        },
                        new
                        {
                            Id = 38,
                            Active = true,
                            CategoryId = 7,
                            Description = "A timeless bouquet featuring pristine white roses and delicate peonies, symbolizing everlasting love and grace.",
                            IsAvailable = true,
                            IsFeatured = true,
                            IsNew = false,
                            Name = "Eternal Elegance",
                            Price = 55.00m
                        },
                        new
                        {
                            Id = 39,
                            Active = true,
                            CategoryId = 7,
                            Description = "An opulent arrangement of blush roses, cream dahlias, and eucalyptus — a perfect statement of lavish celebration.",
                            IsAvailable = true,
                            IsFeatured = false,
                            IsNew = false,
                            Name = "Blushing Bride",
                            Price = 65.00m
                        },
                        new
                        {
                            Id = 40,
                            Active = true,
                            CategoryId = 7,
                            Description = "Elegant white calla lilies, known for their purity and refined beauty.",
                            IsAvailable = true,
                            IsFeatured = false,
                            IsNew = false,
                            Name = "Pure Grace",
                            Price = 45.00m
                        },
                        new
                        {
                            Id = 41,
                            Active = true,
                            CategoryId = 7,
                            Description = "A refined bouquet of long-stemmed calla lilies, gently complemented by red roses",
                            IsAvailable = true,
                            IsFeatured = false,
                            IsNew = false,
                            Name = "Winter bride",
                            Price = 55.00m
                        },
                        new
                        {
                            Id = 42,
                            Active = true,
                            CategoryId = 7,
                            Description = "A fresh and airy bouquet with dew-kissed ranunculus and white lisianthus,",
                            IsAvailable = true,
                            IsFeatured = false,
                            IsNew = false,
                            Name = "Dreamy Dew",
                            Price = 30.00m
                        },
                        new
                        {
                            Id = 43,
                            Active = true,
                            CategoryId = 6,
                            Description = "Capture the warmth of golden moments with this curated box of florals, fine confections, and timeless keepsakes.",
                            IsAvailable = true,
                            IsFeatured = false,
                            IsNew = false,
                            Name = "Golden Hour",
                            OccasionId = 1,
                            Price = 145.00m
                        },
                        new
                        {
                            Id = 44,
                            Active = true,
                            CategoryId = 6,
                            Description = "Overflowing with elegant flowers and premium goodies, this box delivers an unforgettable sensory experience.",
                            IsAvailable = true,
                            IsFeatured = false,
                            IsNew = false,
                            Name = "Pure Indulgence",
                            OccasionId = 1,
                            Price = 135.00m
                        },
                        new
                        {
                            Id = 45,
                            Active = true,
                            CategoryId = 6,
                            Description = "A romantic ensemble of roses, chocolate truffles, and a hint of fragrance – a heartfelt gift for someone special.",
                            IsAvailable = true,
                            IsFeatured = false,
                            IsNew = false,
                            Name = "Amour Box ",
                            OccasionId = 1,
                            Price = 135.00m
                        },
                        new
                        {
                            Id = 46,
                            Active = true,
                            CategoryId = 6,
                            Description = "A calming mix of greenery, soft blooms, and wellness items – perfect for relaxation and self-care.",
                            IsAvailable = true,
                            IsFeatured = true,
                            IsNew = false,
                            Name = "Serenity Set ",
                            OccasionId = 1,
                            Price = 150.00m
                        },
                        new
                        {
                            Id = 47,
                            Active = true,
                            CategoryId = 6,
                            Description = "Mystical and enchanting, this box blends deep-toned florals with luxurious gifts for a bold expression of love.",
                            IsAvailable = true,
                            IsFeatured = false,
                            IsNew = false,
                            Name = "Midnight Bloom",
                            OccasionId = 1,
                            Price = 150.00m
                        },
                        new
                        {
                            Id = 48,
                            Active = true,
                            CategoryId = 4,
                            Description = ".",
                            IsAvailable = true,
                            IsFeatured = false,
                            IsNew = false,
                            Name = "Gerber",
                            Price = 4.00m
                        },
                        new
                        {
                            Id = 49,
                            Active = true,
                            CategoryId = 4,
                            Description = ".",
                            IsAvailable = true,
                            IsFeatured = false,
                            IsNew = false,
                            Name = "Baby's Breath",
                            Price = 2.00m
                        },
                        new
                        {
                            Id = 50,
                            Active = true,
                            CategoryId = 4,
                            Description = ".",
                            IsAvailable = true,
                            IsFeatured = false,
                            IsNew = false,
                            Name = "Lilly",
                            Price = 3.00m
                        },
                        new
                        {
                            Id = 51,
                            Active = true,
                            CategoryId = 4,
                            Description = ".",
                            IsAvailable = true,
                            IsFeatured = false,
                            IsNew = false,
                            Name = "Margarita",
                            Price = 5.00m
                        },
                        new
                        {
                            Id = 52,
                            Active = true,
                            CategoryId = 4,
                            Description = ".",
                            IsAvailable = true,
                            IsFeatured = false,
                            IsNew = false,
                            Name = "Tulip",
                            Price = 5.00m
                        },
                        new
                        {
                            Id = 53,
                            Active = true,
                            CategoryId = 4,
                            Description = ".",
                            IsAvailable = true,
                            IsFeatured = false,
                            IsNew = false,
                            Name = "Rose",
                            Price = 7.00m
                        },
                        new
                        {
                            Id = 54,
                            Active = true,
                            CategoryId = 4,
                            Description = ".",
                            IsAvailable = true,
                            IsFeatured = false,
                            IsNew = false,
                            Name = "Daisy",
                            Price = 4.00m
                        },
                        new
                        {
                            Id = 55,
                            Active = true,
                            CategoryId = 4,
                            Description = ".",
                            IsAvailable = true,
                            IsFeatured = false,
                            IsNew = false,
                            Name = "Hydrangea",
                            Price = 8.00m
                        },
                        new
                        {
                            Id = 56,
                            Active = true,
                            CategoryId = 4,
                            Description = ".",
                            IsAvailable = true,
                            IsFeatured = false,
                            IsNew = false,
                            Name = "Calla Lilly",
                            Price = 6.00m
                        });
                });

            modelBuilder.Entity("Flora.Services.Database.ProductImages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageUrl = "https://florablobstorage.blob.core.windows.net/profile-images/birth.jpg",
                            ProductId = 1
                        },
                        new
                        {
                            Id = 2,
                            ImageUrl = "https://florablobstorage.blob.core.windows.net/profile-images/birth2.jpg",
                            ProductId = 2
                        },
                        new
                        {
                            Id = 3,
                            ImageUrl = "https://florablobstorage.blob.core.windows.net/profile-images/birthday.jpg",
                            ProductId = 3
                        },
                        new
                        {
                            Id = 4,
                            ImageUrl = "https://florablobstorage.blob.core.windows.net/profile-images/bluetulips.jpg",
                            ProductId = 4
                        },
                        new
                        {
                            Id = 5,
                            ImageUrl = "https://florablobstorage.blob.core.windows.net/profile-images/chocolateflowerdome2.jpg",
                            ProductId = 5
                        },
                        new
                        {
                            Id = 6,
                            ImageUrl = "https://florablobstorage.blob.core.windows.net/profile-images/box2.jpg",
                            ProductId = 6
                        },
                        new
                        {
                            Id = 7,
                            ImageUrl = "https://florablobstorage.blob.core.windows.net/profile-images/box3.jpg",
                            ProductId = 7
                        },
                        new
                        {
                            Id = 8,
                            ImageUrl = "https://florablobstorage.blob.core.windows.net/profile-images/box4.jpg",
                            ProductId = 8
                        },
                        new
                        {
                            Id = 9,
                            ImageUrl = "https://florablobstorage.blob.core.windows.net/profile-images/box5.jpg",
                            ProductId = 9
                        },
                        new
                        {
                            Id = 10,
                            ImageUrl = "https://florablobstorage.blob.core.windows.net/profile-images/box7.jpg",
                            ProductId = 10
                        },
                        new
                        {
                            Id = 11,
                            ImageUrl = "https://florablobstorage.blob.core.windows.net/profile-images/cactus.png",
                            ProductId = 11
                        },
                        new
                        {
                            Id = 12,
                            ImageUrl = "https://florablobstorage.blob.core.windows.net/profile-images/cornplant.png",
                            ProductId = 12
                        },
                        new
                        {
                            Id = 13,
                            ImageUrl = "https://florablobstorage.blob.core.windows.net/profile-images/dalias.jpg",
                            ProductId = 13
                        },
                        new
                        {
                            Id = 14,
                            ImageUrl = "https://florablobstorage.blob.core.windows.net/profile-images/flowerdome2.jpg",
                            ProductId = 14
                        },
                        new
                        {
                            Id = 15,
                            ImageUrl = "https://florablobstorage.blob.core.windows.net/profile-images/flowerdome3.jpg",
                            ProductId = 15
                        },
                        new
                        {
                            Id = 16,
                            ImageUrl = "https://florablobstorage.blob.core.windows.net/profile-images/flowerdome4.jpg",
                            ProductId = 16
                        },
                        new
                        {
                            Id = 17,
                            ImageUrl = "https://florablobstorage.blob.core.windows.net/profile-images/flowerdome6.jpg",
                            ProductId = 17
                        },
                        new
                        {
                            Id = 18,
                            ImageUrl = "https://florablobstorage.blob.core.windows.net/profile-images/flowerdomebirthday.jpg",
                            ProductId = 18
                        },
                        new
                        {
                            Id = 19,
                            ImageUrl = "https://florablobstorage.blob.core.windows.net/profile-images/flowermix1.jpg",
                            ProductId = 19
                        },
                        new
                        {
                            Id = 20,
                            ImageUrl = "https://florablobstorage.blob.core.windows.net/profile-images/flowermix2.jpg",
                            ProductId = 20
                        },
                        new
                        {
                            Id = 21,
                            ImageUrl = "https://florablobstorage.blob.core.windows.net/profile-images/flowermix3.jpg",
                            ProductId = 21
                        },
                        new
                        {
                            Id = 22,
                            ImageUrl = "https://florablobstorage.blob.core.windows.net/profile-images/gerbers.jpg",
                            ProductId = 22
                        },
                        new
                        {
                            Id = 23,
                            ImageUrl = "https://florablobstorage.blob.core.windows.net/profile-images/graduation.jpg",
                            ProductId = 23
                        },
                        new
                        {
                            Id = 24,
                            ImageUrl = "https://florablobstorage.blob.core.windows.net/profile-images/graduation2.jpg",
                            ProductId = 24
                        },
                        new
                        {
                            Id = 25,
                            ImageUrl = "https://florablobstorage.blob.core.windows.net/profile-images/graduation3.jpg",
                            ProductId = 25
                        },
                        new
                        {
                            Id = 26,
                            ImageUrl = "https://florablobstorage.blob.core.windows.net/profile-images/graduation6.jpg",
                            ProductId = 26
                        },
                        new
                        {
                            Id = 27,
                            ImageUrl = "https://florablobstorage.blob.core.windows.net/profile-images/hidrogenia.jpg",
                            ProductId = 22
                        },
                        new
                        {
                            Id = 28,
                            ImageUrl = "https://florablobstorage.blob.core.windows.net/profile-images/palm.png",
                            ProductId = 28
                        },
                        new
                        {
                            Id = 29,
                            ImageUrl = "https://florablobstorage.blob.core.windows.net/profile-images/peacelilly.png",
                            ProductId = 29
                        },
                        new
                        {
                            Id = 30,
                            ImageUrl = "https://florablobstorage.blob.core.windows.net/profile-images/philodendron.png",
                            ProductId = 30
                        },
                        new
                        {
                            Id = 31,
                            ImageUrl = "https://florablobstorage.blob.core.windows.net/profile-images/pinklillies.jpg",
                            ProductId = 31
                        },
                        new
                        {
                            Id = 32,
                            ImageUrl = "https://florablobstorage.blob.core.windows.net/profile-images/pinktulips.jpg",
                            ProductId = 22
                        },
                        new
                        {
                            Id = 33,
                            ImageUrl = "https://florablobstorage.blob.core.windows.net/profile-images/purpletulips.jpg",
                            ProductId = 33
                        },
                        new
                        {
                            Id = 34,
                            ImageUrl = "https://florablobstorage.blob.core.windows.net/profile-images/red%20roses.jpg",
                            ProductId = 34
                        },
                        new
                        {
                            Id = 35,
                            ImageUrl = "https://florablobstorage.blob.core.windows.net/profile-images/snakeplant.png",
                            ProductId = 35
                        },
                        new
                        {
                            Id = 36,
                            ImageUrl = "https://florablobstorage.blob.core.windows.net/profile-images/spiderplant.png",
                            ProductId = 36
                        },
                        new
                        {
                            Id = 37,
                            ImageUrl = "https://florablobstorage.blob.core.windows.net/profile-images/suculents.png",
                            ProductId = 37
                        },
                        new
                        {
                            Id = 38,
                            ImageUrl = "https://florablobstorage.blob.core.windows.net/profile-images/weeding.jpg",
                            ProductId = 38
                        },
                        new
                        {
                            Id = 39,
                            ImageUrl = "https://florablobstorage.blob.core.windows.net/profile-images/weeding2.jpg",
                            ProductId = 39
                        },
                        new
                        {
                            Id = 40,
                            ImageUrl = "https://florablobstorage.blob.core.windows.net/profile-images/weeding3.jpg",
                            ProductId = 40
                        },
                        new
                        {
                            Id = 41,
                            ImageUrl = "https://florablobstorage.blob.core.windows.net/profile-images/weeding4.jpg",
                            ProductId = 41
                        },
                        new
                        {
                            Id = 42,
                            ImageUrl = "https://florablobstorage.blob.core.windows.net/profile-images/weeding5.jpg",
                            ProductId = 42
                        },
                        new
                        {
                            Id = 43,
                            ImageUrl = "https://florablobstorage.blob.core.windows.net/profile-images/agb1.jpg",
                            ProductId = 43
                        },
                        new
                        {
                            Id = 44,
                            ImageUrl = "https://florablobstorage.blob.core.windows.net/profile-images/agb2.jpg",
                            ProductId = 44
                        },
                        new
                        {
                            Id = 45,
                            ImageUrl = "https://florablobstorage.blob.core.windows.net/profile-images/agb3.jpg",
                            ProductId = 45
                        },
                        new
                        {
                            Id = 46,
                            ImageUrl = "https://florablobstorage.blob.core.windows.net/profile-images/agb4.jpg",
                            ProductId = 46
                        },
                        new
                        {
                            Id = 47,
                            ImageUrl = "https://florablobstorage.blob.core.windows.net/profile-images/agb5.jpg",
                            ProductId = 47
                        },
                        new
                        {
                            Id = 48,
                            ImageUrl = "https://florablobstorage.blob.core.windows.net/profile-images/cb1.jpg",
                            ProductId = 48
                        },
                        new
                        {
                            Id = 49,
                            ImageUrl = "https://florablobstorage.blob.core.windows.net/profile-images/cb2.jpg",
                            ProductId = 49
                        },
                        new
                        {
                            Id = 50,
                            ImageUrl = "https://florablobstorage.blob.core.windows.net/profile-images/cb3.jpg",
                            ProductId = 50
                        },
                        new
                        {
                            Id = 51,
                            ImageUrl = "https://florablobstorage.blob.core.windows.net/profile-images/cb4.jpg",
                            ProductId = 51
                        },
                        new
                        {
                            Id = 52,
                            ImageUrl = "https://florablobstorage.blob.core.windows.net/profile-images/cb5.jpg",
                            ProductId = 52
                        },
                        new
                        {
                            Id = 53,
                            ImageUrl = "https://florablobstorage.blob.core.windows.net/profile-images/cb6.jpg",
                            ProductId = 53
                        },
                        new
                        {
                            Id = 54,
                            ImageUrl = "https://florablobstorage.blob.core.windows.net/profile-images/cb7.jpg",
                            ProductId = 54
                        },
                        new
                        {
                            Id = 55,
                            ImageUrl = "https://florablobstorage.blob.core.windows.net/profile-images/cb8.jpg",
                            ProductId = 55
                        },
                        new
                        {
                            Id = 56,
                            ImageUrl = "https://florablobstorage.blob.core.windows.net/profile-images/cb9.jpg",
                            ProductId = 56
                        });
                });

            modelBuilder.Entity("Flora.Services.Database.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 8, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Administrator role",
                            IsActive = true,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 8, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Standard user role",
                            IsActive = true,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("Flora.Services.Database.ShippingAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HouseNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ShippingAddresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Sarajevo",
                            FirstName = "Maja",
                            HouseNumber = "10",
                            LastName = "Hodžić",
                            OrderNote = "Please call before delivery",
                            PostalCode = "71000",
                            Street = "Zmaja od Bosne"
                        },
                        new
                        {
                            Id = 2,
                            City = "Mostar",
                            FirstName = "Amina",
                            HouseNumber = "15",
                            LastName = "Delić",
                            OrderNote = "Leave at reception",
                            PostalCode = "88000",
                            Street = "Kralja Tvrtka"
                        },
                        new
                        {
                            Id = 3,
                            City = "Tuzla",
                            FirstName = "Emina",
                            HouseNumber = "8",
                            LastName = "Jahić",
                            PostalCode = "75000",
                            Street = "Pozorišna"
                        },
                        new
                        {
                            Id = 4,
                            City = "Zenica",
                            FirstName = "Medin",
                            HouseNumber = "22",
                            LastName = "Mujkić",
                            OrderNote = "Apartment 3, 2nd floor",
                            PostalCode = "72000",
                            Street = "Maršala Tita"
                        });
                });

            modelBuilder.Entity("Flora.Services.Database.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ProfileImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 8, 21, 12, 33, 57, 133, DateTimeKind.Utc).AddTicks(8287),
                            Email = "admin@flora.com",
                            FirstName = "Admin",
                            IsActive = true,
                            LastName = "Admin",
                            PasswordHash = "1DYDCHFbeqQIq0GVr8itVEiQ387/fv3QT3fiRm+lWAc=",
                            PasswordSalt = "Of0phUJHn47cfDbtB1xXKg==",
                            Username = "admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 8, 21, 12, 33, 57, 133, DateTimeKind.Utc).AddTicks(8291),
                            Email = "user@flora.com",
                            FirstName = "User",
                            IsActive = true,
                            LastName = "User",
                            PasswordHash = "CwfSHadpULY2qBu52teAwqiOXQJiKeWD/Fc/2Ht7WKM=",
                            PasswordSalt = "2xrjDT87fF+nK2dKS0GdZg==",
                            Username = "user"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 8, 21, 12, 33, 57, 133, DateTimeKind.Utc).AddTicks(8294),
                            Email = "medina@flora.com",
                            FirstName = "Medina",
                            IsActive = true,
                            LastName = "Krhan",
                            PasswordHash = "1bcl2+a/nCH9yw4O+dE2tIFfqSjNwoUwQki5FkDSSvY=",
                            PasswordSalt = "4r94XhCARl1PChd3Ay7s+A==",
                            Username = "medina"
                        });
                });

            modelBuilder.Entity("Flora.Services.Database.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateAssigned")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId", "RoleId")
                        .IsUnique();

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateAssigned = new DateTime(2025, 8, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            DateAssigned = new DateTime(2025, 8, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            DateAssigned = new DateTime(2025, 8, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = 2,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("Flora.Services.Database.BlogComment", b =>
                {
                    b.HasOne("Flora.Services.Database.BlogPost", "BlogPost")
                        .WithMany("Comments")
                        .HasForeignKey("BlogPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flora.Services.Database.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BlogPost");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Flora.Services.Database.BlogImage", b =>
                {
                    b.HasOne("Flora.Services.Database.BlogPost", "BlogPost")
                        .WithMany("Images")
                        .HasForeignKey("BlogPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BlogPost");
                });

            modelBuilder.Entity("Flora.Services.Database.CartItem", b =>
                {
                    b.HasOne("Flora.Services.Database.Cart", "Cart")
                        .WithMany("Items")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flora.Services.Database.CustomBouquet", "CustomBouquet")
                        .WithMany()
                        .HasForeignKey("CustomBouquetId");

                    b.HasOne("Flora.Services.Database.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.Navigation("Cart");

                    b.Navigation("CustomBouquet");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Flora.Services.Database.CustomBouquet", b =>
                {
                    b.HasOne("Flora.Services.Database.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Flora.Services.Database.CustomBouquetItem", b =>
                {
                    b.HasOne("Flora.Services.Database.CustomBouquet", "CustomBouquet")
                        .WithMany("Items")
                        .HasForeignKey("CustomBouquetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flora.Services.Database.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomBouquet");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Flora.Services.Database.DecorationRequest", b =>
                {
                    b.HasOne("Flora.Services.Database.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Flora.Services.Database.DecorationSelection", b =>
                {
                    b.HasOne("Flora.Services.Database.DecorationRequest", "DecorationRequest")
                        .WithMany()
                        .HasForeignKey("DecorationRequestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Flora.Services.Database.DecorationSuggestion", "DecorationSuggestion")
                        .WithMany()
                        .HasForeignKey("DecorationSuggestionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Flora.Services.Database.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DecorationRequest");

                    b.Navigation("DecorationSuggestion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Flora.Services.Database.DecorationSuggestion", b =>
                {
                    b.HasOne("Flora.Services.Database.DecorationRequest", "DecorationRequest")
                        .WithMany("Suggestions")
                        .HasForeignKey("DecorationRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DecorationRequest");
                });

            modelBuilder.Entity("Flora.Services.Database.Donation", b =>
                {
                    b.HasOne("Flora.Services.Database.DonationCampaign", "Campaign")
                        .WithMany("Donations")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flora.Services.Database.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Flora.Services.Database.Favorite", b =>
                {
                    b.HasOne("Flora.Services.Database.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flora.Services.Database.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Flora.Services.Database.Order", b =>
                {
                    b.HasOne("Flora.Services.Database.ShippingAddress", "ShippingAddress")
                        .WithMany()
                        .HasForeignKey("ShippingAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShippingAddress");
                });

            modelBuilder.Entity("Flora.Services.Database.OrderDetail", b =>
                {
                    b.HasOne("Flora.Services.Database.CustomBouquet", "customBouquet")
                        .WithMany()
                        .HasForeignKey("CustomBouquetId");

                    b.HasOne("Flora.Services.Database.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flora.Services.Database.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.Navigation("Order");

                    b.Navigation("Product");

                    b.Navigation("customBouquet");
                });

            modelBuilder.Entity("Flora.Services.Database.Product", b =>
                {
                    b.HasOne("Flora.Services.Database.Categories", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("Flora.Services.Database.Occasion", "Occasion")
                        .WithMany("Products")
                        .HasForeignKey("OccasionId");

                    b.Navigation("Category");

                    b.Navigation("Occasion");
                });

            modelBuilder.Entity("Flora.Services.Database.ProductImages", b =>
                {
                    b.HasOne("Flora.Services.Database.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Flora.Services.Database.UserRole", b =>
                {
                    b.HasOne("Flora.Services.Database.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flora.Services.Database.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Flora.Services.Database.BlogPost", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Images");
                });

            modelBuilder.Entity("Flora.Services.Database.Cart", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Flora.Services.Database.CustomBouquet", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Flora.Services.Database.DecorationRequest", b =>
                {
                    b.Navigation("Suggestions");
                });

            modelBuilder.Entity("Flora.Services.Database.DonationCampaign", b =>
                {
                    b.Navigation("Donations");
                });

            modelBuilder.Entity("Flora.Services.Database.Occasion", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Flora.Services.Database.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Flora.Services.Database.Product", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("Flora.Services.Database.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Flora.Services.Database.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
